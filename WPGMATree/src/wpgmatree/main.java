package wpgmatree;
/**
 * 
 * @author Patrick Solis
 * Prof. Phillip Heller
 * CS123A
 * Bioinformatics Project: BReastCAncer
 */
import java.io.*;
import java.util.ArrayList;

public class main {
	
	public static void main(String[] args)
	{
		
		//Used to store command line arguments
		ArrayList<String> input = new ArrayList<String>();
		
		//Saves first file into ArrayList
		String fileName = args[0];
		
		//Will be used to hold each line in file
		String line;
		
		//Array to store the scores generated by MSA
		float[] scores = new float[0];
		
		//Amount of sequences used in MSA
		int size = 0;
		
		//Stores max value
		float max = 0;
		
		try{
			//FileReader will read the file
			FileReader fileReader = new FileReader(fileName);
			
			//Wrap FileReader in BufferedReader.
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			
			//Stores size 
			size = Integer.parseInt(bufferedReader.readLine());
			
			//Stores number of scores
			int scoreSize = Integer.parseInt(bufferedReader.readLine());
			
			//Re-implements scores array
			scores = new float[scoreSize];
			
			//for loop to skip the location of the sequences
			//for(int i = 0; i < size; i++)
			//{
			//	bufferedReader.readLine();
			//}
			
			int i = 0;
			
			//Adds scores to array
			while(bufferedReader.ready())
			{
				//bufferedReader.skip(4);
				line = bufferedReader.readLine();
				line  = line.substring(4, line.length());
				scores[i] = Float.parseFloat(line);
				if(scores[i] > max)
				{
					max = scores[i];
				}
				i++;
			}
			max += 10;
			
			//Used to make best score a smaller number
			for(i = 0; i < scoreSize; i++)
			{
				scores[i] = max - scores[i];
			}
			
			//closes BufferedReader
			bufferedReader.close();
		}
		catch(FileNotFoundException ex) {
			System.out.println("Unable to open File '" + fileName + "'");
		}
		catch(IOException ex){
			System.out.println("Error reading File '" + fileName + "'");
		}
		
		//Created new ArrayList<Node>
		ArrayList<Node> sequences = new ArrayList<Node>();
		
		//Creates new Nodes by number and empty size
		for(int i = 0; i < size; i++)
		{
			sequences.add(new Node(i + "", 0));
		}

		//Creates tree and passes the scores array, number of sequences, and ArrayList of Nodes
		Tree tree = new Tree(scores, size, sequences);
		
		//Generates new 2d array for grid
		float grid[][] = new float[size][size];
		
		int k = 0;
		
		//Puts scores into grid
		for(int i = 0; i < size; i++)
		{
			for(int j = i+1; j < size; j++)
			{
				grid[j][i] = scores[k];
				k++;
			}
		}
		
		//Prints the current grid
		tree.printGrid(grid, size);
		
		//Sends current grid to be paired
		tree.pair(grid);
		
		//Grabs next file to be written
		fileName = args[1];
		
		try
		{
			//FileWriter to write on current file
			FileWriter fileWriter = new FileWriter(fileName);
			
			// Wrap FileWriter in BufferedWriter.
			BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
			
			bufferedWriter.write("WPGMA TREE: BRCA1\n\nOffset by max: " + (max-10) + " + 10\n((max + 10) - initialScore = currentScore)\n\n");
			bufferedWriter.newLine();
			
			//generates tree within file
			bufferedWriter.write(tree.printTree(tree.pairedSequences.get(tree.pairedSequences.size()-1)));
			
			//closes BufferedWriter
			bufferedWriter.close();
		}
		catch(IOException ex){
			System.out.println("Error writing to file '" + fileName +"'");
		}
	}
}
